/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/java_library_plugin.html
 */
 
group 'com.productiveAnalytics.springBootTest'

apply plugin: 'java'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

allprojects {
    apply plugin: 'base'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.7.+'
        classpath "org.jacoco:org.jacoco.agent:0.8.1"
		classpath "org.jacoco:org.jacoco.core:0.8.1"
		classpath "org.jacoco:org.jacoco.report:0.8.1"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    repositories {
        jcenter()
    }

    ext {
        awsSDKVersion = '2.0.0-preview-12'
    }

    dependencyManagement {
        imports {
            mavenBom 'software.amazon.awssdk:bom:' + awsSDKVersion
        }
    }

    dependencies {
        testCompile 'junit:junit'
    }

    test {
        testLogging.showStandardStreams = true
    }
	
	jacoco{ 
    	toolVersion = "0.8.1" 
    }

	jacocoTestReport {
		reports {
			csv.enabled = false
			xml.enabled = false
			html.enabled = true
			html.destination file("${buildDir}/jacocoHtml")
		}
	}
	
	jacocoTestCoverageVerification {
		violationRules {
			rule {
					enabled = true
            		element = 'CLASS'
            		includes = ['org.gradle.*']
					
            		limit { 
						counter = 'LINE' 
						value = 'TOTALCOUNT' 
						minimum = 0.70 
					}
			}
		}
	}

}

dependencies {
    // Use JUnit test framework
    testImplementation 'junit:junit'
}

task buildDeployScriptsZip(type: Zip) {
    from ('.') {
        include 'deploymentScripts/*'
    }
    baseName = 'test-with-spring-boot-profiles'
}

artifacts {
    archives buildDeployScriptsZip
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.productiveAnalytics.springBoot'
            artifactId 'test-with-spring-boot-profiles'
            version file("${projectDir}/.version").text.trim()
            artifact buildDeployScriptsZip
        }
    }
}

task aggregateJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    def projectVersion  = file("${projectDir}/.version").text.trim()
    destinationDir = file("${projectDir}/javadoc")
    title = "$project.name " + projectVersion
    options.links 'http://docs.spring.io/spring/docs/4.3.x/javadoc-api/', 'http://docs.oracle.com/javase/8/docs/api/', 'http://docs.spring.io/spring-ws/docs/2.3.0.RELEASE/api/', 'http://docs.spring.io/spring-security/site/docs/4.0.4.RELEASE/apidocs/'
    options.addStringOption 'Xdoclint:none', '-quiet'
    options.addStringOption("sourcepath", "")

    subprojects.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}

task testReport(type: TestReport) {
    // make sure this task is run after all subproject test tasks
    mustRunAfter subprojects*.test

    destinationDir = file("$projectDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
   	executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}